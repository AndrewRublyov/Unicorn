(* Atoms *)
letter = "A" | "B" | "C" | "D" | "E" | "F" | "G"
       | "H" | "I" | "J" | "K" | "L" | "M" | "N"
       | "O" | "P" | "Q" | "R" | "S" | "T" | "U"
       | "V" | "W" | "X" | "Y" | "Z" | "a" | "b"
       | "c" | "d" | "e" | "f" | "g" | "h" | "i"
       | "j" | "k" | "l" | "m" | "n" | "o" | "p"
       | "q" | "r" | "s" | "t" | "u" | "v" | "w"
       | "x" | "y" | "z" ;

digit_no_zero = "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9";
digit = "0" | digit_no_zero ;

symbol = "[" | "]" | "{" | "}" | "(" | ")" | "<" | ">"
       | "'" | '"' | "=" | "|" | "." | "," | ";" ;
symbol_id = "$" | "'" | "_";

id = ( symbol_id | letter ), { symbol_id | letter | digit };
character = "'", unicode_char, "_";
integer = "0" | ( digit_no_zero, { digit } );
string = '"', { unicode_char }, '"';

(* Expressions *)
assignment = id, '=', expression;
expression = term | expression '+' term | expression '-' term;
term = factor | term '*' factor | term '/' factor | term '%' factor;
factor = primary | '-' factor | '+' factor;
primary = id | character | integer | string | '(', expression, ')';

return = 'return', { expression };
expression_statement = expression | return;

signature = ':', id; 
variable_declaration = 'let', id, signature, '=', expression;
parameter_declaration = id, signature;
function = 'fun', id, '(', { parameter_declaration, { ',', parameter_declaration } }, ')', signature, '{', { expression_statement }, '}';
deps = 'deps', '{', { string }, '}';
top_level_statement = deps | function;

(* Grammar root *)
program = { top_level_statement };